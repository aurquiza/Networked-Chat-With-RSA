/*
 *  This class will compute The RSA algorithm for every user that connects
 *  to the server chat program. Every user will have their own private and public key
 *  
 *  Note: - implementation for block sizes is still undecided, which will determine the minimum product size
 *          of two prime numbers
 *        - Primality test still not implemented. currently researching the best algorithm that is computationally fast
 *          and not incredibly difficult to code.
 */
package Securitypkg;

public class RSA
{
	// numbers that must be prime
	private int p;
	private int q;
	
	// computed using the values p and q 
	private int n;
	private int m;
	
	// computed using m
	private int e;
	private int d;
	
	// private and public keys generated by the RSA algorithm
	private PublicKey pubKey;
	private PrivateKey privKey;
	
	//constructor
	// @Param p - passed in to compute rsa algorithm. must be prime
	// @Param q
	public RSA(int p, int q)
	{
		this.q = q;
		this.p = p;
		
		n = p*q;
		m = (p - 1)*(q - 1);
		
		e = findFirstE();
		d = findD();
		
		pubKey = new PublicKey(n, e);
		privKey = new PrivateKey(n, d);
	}
	
	// This attempts to find a potential 'e' for the RSA algorithm 
	// where the gcd for e and m is 1.
	private int findFirstE()
	{
		// make object that will compute gcd
		EuclidianAlgorithm ea = new EuclidianAlgorithm(2, m);
		ea.computeGCD();
		int gcd = ea.getGCD();
		
		// initialize potentialE
		int potentialE = 2;
		
		// loop until the gcd for e and m is 1
		while(gcd != 1)
		{
			potentialE++;
			
			ea.setNewNumbers(potentialE, m);
			ea.computeGCD();
			gcd = ea.getGCD();
		}
		
		return potentialE;
	}
	
	// computes the value for D by continually looping and incrementing until the equation
	// equals 0 meaning the value 'k' managed to make the equation divisible by e
	private int findD()
	{
		int potentialK = 0;
		int potentialD = -1;
		
		while(((1 + potentialK*m) % e) != 0)
			potentialK++;
		
		potentialD = (1 + potentialK*m) / e;
		
		return potentialD;
	}
	
	
	// returns public key as an integer array of size 2
	public int[] getPubKey()
	{
		int publicKey[] = new int[]{pubKey.getN(),pubKey.getE()};
		return publicKey;
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	// 					Methods mainly used for JUnit testing
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	
	public int getPVal()
	{
		return p;
	}
	
	public int getQVal()
	{
		return q;
	}
	
	public int getNVal()
	{
		return n;
	}
	
	public int getMVal()
	{
		return m;
	}
	
	public int getE()
	{
		return e;
	}
	
	public int getDVal()
	{
		return d;
	}
	
	public static int getGCD(int num1, int num2)
	{
		EuclidianAlgorithm e = new EuclidianAlgorithm(num1, num2);
		e.computeGCD();
		return e.getGCD();
	}
	
}
